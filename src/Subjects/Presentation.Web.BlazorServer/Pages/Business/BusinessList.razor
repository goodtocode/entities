@page "/businesssearch"
@using Goodtocode.Common.Extensions;
@using Goodtocode.Subjects.BlazorServer.Data;
@using Goodtocode.Subjects.BlazorServer.Models;
@using Goodtocode.Subjects.Domain;
@using System.ComponentModel.DataAnnotations;
@using Goodtocode.Subjects.Rcl;
@using Microsoft.AspNetCore.Http.Extensions;

@inject BusinessService Service
@inject PageHistoryState PageHistory
@inject NavigationManager UriHelper

<PageTitle>Business Search</PageTitle>

<EditForm Model="@SearchTerm" OnValidSubmit="@GetBusinesses">
    <DataAnnotationsValidator />
    <div class="input-group mb-3">
        <input type="text" class="form-control form-control-lg" placeholder="Search" aria-label="Search" aria-describedby="button-addon2"
        @bind="@SearchTerm">
        <button class="btn btn-primary btn-lg" type="submit" id="button-addon2"><i class="bi bi-search"></i></button>
    </div>
    <ValidationSummary />
    <div hidden="@string.IsNullOrEmpty(alertMessage)" class="alert alert-danger" role="alert">@alertMessage</div>
    <div hidden="@(!processing)" class="spinner-border text-primary center-screen" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</EditForm>


@if (businesses.Results.Count() > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Name</th>
                <th>Tax Number</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var business in businesses.Results)
            {
                <tr>
                    <td>@business.BusinessKey</td>
                    <td>@business.BusinessName</td>
                    <td>@business.TaxNumber</td>
                    <td style="white-space: nowrap">
                        <NavLink href="@($"/person/viewperson/{business.BusinessKey}")" class="oi oi-eye text-primary mr-3 nounderline"></NavLink>
                        <NavLink href="@($"/person/updateperson/{business.BusinessKey}")" class="oi oi-pencil text-warning mr-2 nounderline"></NavLink>

                        @if (business.IsDeleting)
                        {
                            <button @onclick="@(() => DeleteBusiness(business.BusinessKey))" disabled="@business.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                <span class="spinner-border spinner-border-sm"></span>
                            </button>
                        }
                        else
                        {
                            <button @onclick="@(() => DeleteBusiness(business.BusinessKey))" disabled="@business.IsDeleting" class=" btn btn-link oi oi-trash text-danger mr-1 nounderline">
                                <span></span>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;
    private string alertMessage = string.Empty;
    private SearchModel businessSearch = new SearchModel();
    private PagedResult<BusinessModel> businesses = new PagedResult<BusinessModel>();
    private CancellationTokenSource cts = new CancellationTokenSource();
    private bool processing;

    protected override void OnInitialized()
    {
        PageHistory.AddPageToHistory(UriHelper.Uri);
        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetBusinesses();
        PageHistory.AddPageToHistory(UriHelper.Uri);
    }

    protected async Task SearchBoxKeyPress(KeyboardEventArgs ev)
    {
        if (ev.Key == "Enter")
        {
            await GetBusinesses();
        }
    }

    private async Task GetBusinesses()
    {
        alertMessage = string.Empty;
        
        businessSearch.Name = SearchTerm;

        if (!Validator.TryValidateObject(businessSearch,
            new ValidationContext(businessSearch, serviceProvider: null, items: null), new List<ValidationResult>(), true)) return;

        if (cts != null) cts.Cancel();
        cts = new CancellationTokenSource();
        try
        {
            processing = true;
            await Task.Delay(500, cts.Token);
            businesses = await Service.GetBusinessesAsync(businessSearch.Name, 1);
            if (businesses.Results.Count() == 0)
                alertMessage = "No businesses found";
        }
        catch (TaskCanceledException)
        {
            // Ignore exception if task was cancelled
        }
        finally
        {
            processing = false;
            StateHasChanged();
        }
    }

    private async Task DeleteBusiness(Guid businessKey)
    {

    }

    //private async void DeletePerson(Person _person)
    //{
    //    var person = _person;
    //    person.IsDeleting = true;
    //    await PersonService.DeletePerson(person.PersonId);
    //    people = await PersonService.GetPeople(null, Page);
    //    StateHasChanged();
    //}
}
