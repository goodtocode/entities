on:
  push:
    branches-ignore:
    - main
    paths:
    - .github/workflows/gtc-rg-subjects-api.yml
    - src/**
  pull_request:
    branches:
    - main    
    paths:
    - .github/workflows/gtc-rg-subjects-api.yml
    - src/**

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:  
  build-test-and-deploy:
    name: 'Build, Test and Deploy .NET'
    runs-on: ubuntu-latest
    environment: development    

    strategy:
      matrix:
        dotnet-version: [ '7.0.x' ]

    env:
      AZURE_WEBAPP_NAME: api-subjects-dev-001
      AZURE_WEBAPP_PACKAGE_PATH: '.'
      AZURE_RG_NAME: 'gtc-rg-subjects-dev-001'
      SRC_PATH: './src'
      SRC_SLN: 'GoodToCode.Entities.sln'      
      API_PROJECT: 'Subjects.Presentation.Api.csproj'
      UNIT_PROJECT: 'Subjects.Specs.Unit.csproj'
      SQL_NAME: 'sql-entities-dev-001'
      SQLDB_NAME: 'sqldb-entities-dev-001'
      AZURE_CRED: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: dotnet version ${{ matrix.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.DOTNET_VERSION }}

      - name: dotnet build test and publish
        run: |
          dotnet build ${{ env.SRC_PATH }}/${{ env.SRC_SLN }} --configuration Release       
          dotnet test ${{ env.SRC_PATH }}/**/${{ env.UNIT_PROJECT }} --verbosity normal
          dotnet publish ${{ env.SRC_PATH }}/**/${{ env.API_PROJECT }} -c Release -o ${{ env.AZURE_WEBAPP_NAME }} 

      - name: dotnet test results
        uses: actions/upload-artifact@v3
        with:
          name: dotnet-results-${{ matrix.DOTNET_VERSION }}
          path: TestResults-${{ matrix.DOTNET_VERSION }}
        if: ${{ always() }}

      - name: az login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: get publish profile
        id: publishprofile
        uses: aliencube/publish-profile-actions@v1
        env:
          AZURE_CREDENTIALS: ${{ env.AZURE_CRED }}
        with:
          resourceGroupName: ${{ env.AZURE_RG_NAME }}
          appName: ${{ env.AZURE_WEBAPP_NAME }}

      - name: functionapp deploy
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/${{ env.AZURE_WEBAPP_NAME }}'
          publish-profile: ${{ steps.publishprofile.outputs.profile }}
        if: ${{ false }}

      - name: webapps deploy
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} 
          publish-profile: ${{ steps.publishprofile.outputs.profile }}
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/${{ env.AZURE_WEBAPP_NAME }}'
          #slot-name: staging

      - name: Reset publish profile
        uses: aliencube/publish-profile-actions@v1
        env:
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CRED }}
        with:
          resourceGroupName: ${{ env.AZURE_RG_NAME }}
          appName: ${{ env.AZURE_WEBAPP_NAME }}
          reset: true

      - name: create db connection string
        run: |
          CONN_STR=$(az sql db show-connection-string --client ado.net --server ${{ env.SQL_NAME }} --name ${{ env.SQLDB_NAME }} -o tsv)
          CONN_STR=$(echo $CONN_STR | sed "s/<username>/${{ secrets.SQL_USER }}/g")
          CONN_STR=$(echo $CONN_STR | sed "s/<password>/${{ secrets.SQL_PASSWORD }}/g")
          echo "SQLDB_CONN_STR=$CONN_STR" >> $GITHUB_ENV

      - name: ${{ env.AZURE_WEBAPP_NAME }} Settings
        id: settings
        uses: azure/appservice-settings@v1
        with:
          app-name: '${{ env.AZURE_WEBAPP_NAME }}'
          app-settings-json: '${{ secrets.APP_SETTINGS }}' 
          connection-strings-json: '[{"name": "DefaultConnection", "value": "$SQLDB_CONN_STR", "type":"SQLServer", "slotSetting":"false"}]'

      - name: Update Database
        run: |
          dotnet tool install --global dotnet-ef
          dotnet ef database update
        env:
          ConnectionStrings__MyDbConnection: ${{ env.SQLDB_CONN_STR }}
      
      - name: Swap to production slot
        run: |
          az webapp deployment slot swap --resource-group ${{ env.AZURE_RG_NAME }} --name ${{ env.AZURE_WEBAPP_NAME }} --slot staging --target-slot production
          echo "Swap finished. App Service Application URL: https://$(az webapp show --resource-group ${{ env.AZURE_RG_NAME }} --name ${{ env.AZURE_WEBAPP_NAME }} --query hostNames[0] -o tsv)"
        if: ${{ false }}
