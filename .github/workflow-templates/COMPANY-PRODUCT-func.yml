on:
  push:
    branches:
    - '*'
    paths:
    - src/Core/*
    - src/Infrastructure/*
    - src/Specs/*
    - src/Presentation/Functions/*
  pull-request:
    branches-ignore:
    - '*'
env:
  appcsEnvironmentVariable: AZURE_APPCS_CONNECTION_STRING_ENV_VAR
  appcsConnection: ${{ env.appcsConnection }}
  subscriptionService: AZURE_DEVOPS_SERVICE_CONNECTION_NAME
  template: ../variables/common.yml
#  - name: funcSettings
#    type: object
#    default: 
#      - name: 'APPINSIGHTS_INSTRUMENTATIONKEY'
#        value: '$(appiKey)'
#        slotSetting: false
#      - name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
#        value: '$(appiConnection)'
#        slotSetting: false        
#      - name: 'AZURE_FUNCTIONS_ENVIRONMENT'
#        value: '$(rgEnvironment)'
#        slotSetting: false
#      - name: 'FUNCTIONS_EXTENSION_VERSION'
#        value: '~$(funcVersion)'
#        slotSetting: false
#      - name: 'FUNCTIONS_WORKER_RUNTIME'
#        value: '$(funcRuntime)'
#        slotSetting: false

jobs:
  development_Stage_build_src:
    env:
      template: ../variables/development.yml
    if: (github.ref == 'refs/heads/development')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/dotnet-build-steps.yml
        artifactsPath: ${{ env.artifactsPath }}
        srcPath: ${{ env.srcPath }}
  development_Stage_test_unit:
    needs:
    - development_Stage_build_src
    env:
      template: ../variables/development.yml
    if: (github.ref == 'refs/heads/development')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/dotnet-test-steps.yml
        testPath: ${{ env.unitPath }}
        testProject: ${{ env.unitProject }}
        restorePath: ${{ env.srcPath }}
        appcsEnvironmentVariable: ${{ env.appcsEnvironmentVariable }}
        appcsConnection: ${{ env.appcsConnection }}
        rgEnvironment: ${{ env.rgEnvironment }}
  development_Stage_build_func:
    needs:
    - development_Stage_test_unit
    env:
      template: ../variables/development.yml
    if: (github.ref == 'refs/heads/development')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-build-steps.yml
        archiveFile: ${{ env.archiveFileFunc }}
        scriptsPath: ${{ env.scriptspath }}
        funcPath: ${{ env.funcPath }}
        tempPath: ${{ env.tempPath }}
  development_Stage_settings_func:
    needs:
    - development_Stage_build_func
    env:
      template: ../variables/development.yml
    if: (github.ref == 'refs/heads/development')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-settings-steps.yml
        subscriptionService: ${{ env. parameters.subscriptionService  }}
        rgEnvironment: ${{ env.rgEnvironment }}
        funcName: ${{ env.funcName }}
        appSettings: ${{ env. parameters.funcSettings  }}
  development_Stage_deploy_func:
    needs:
    - development_Stage_settings_func
    env:
      template: ../variables/development.yml
    if: (github.ref == 'refs/heads/development')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-deploy-steps.yml
        artifactsPath: ${{ env.artifactsPath }}
        archiveFile: ${{ env.archiveFileFunc }}
        funcName: ${{ env.funcName }}
        subscriptionId: ${{ env.subscriptionId }}
        subscriptionService: ${{ env. parameters.subscriptionService  }}

  production_Stage_build_src:
    env:
      template: ../variables/production.yml
    if: (github.ref == 'refs/heads/production')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/dotnet-build-steps.yml
        artifactsPath: ${{ env.artifactsPath }}
        srcPath: ${{ env.srcPath }}
  production_Stage_test_unit:
    needs:
    - production_Stage_build_src
    env:
      template: ../variables/production.yml
    if: (github.ref == 'refs/heads/production')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/dotnet-test-steps.yml
        testPath: ${{ env.unitPath }}
        testProject: ${{ env.unitProject }}
        restorePath: ${{ env.srcPath }}
        appcsEnvironmentVariable: ${{ env.appcsEnvironmentVariable }}
        appcsConnection: ${{ env.appcsConnection }}
        rgEnvironment: ${{ env.rgEnvironment }}
  production_Stage_build_func:
    needs:
    - production_Stage_test_unit
    env:
      template: ../variables/production.yml
    if: (github.ref == 'refs/heads/production')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-build-steps.yml
        archiveFile: ${{ env.archiveFileFunc }}
        scriptsPath: ${{ env.scriptspath }}
        funcPath: ${{ env.funcPath }}
        tempPath: ${{ env.tempPath }}
  production_Stage_settings_func:
    needs:
    - production_Stage_build_func
    env:
      template: ../variables/production.yml
    if: (github.ref == 'refs/heads/production')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-settings-steps.yml
        subscriptionService: ${{ env. parameters.subscriptionService  }}
        rgEnvironment: ${{ env.rgEnvironment }}
        funcName: ${{ env.funcName }}
        appSettings: ${{ env. parameters.funcSettings  }}
  production_Stage_deploy_func:
    needs:
    - production_Stage_settings_func
    env:
      template: ../variables/production.yml
    if: (github.ref == 'refs/heads/production')
    steps:
    - uses: actions/checkout@v2
    - run: |
        #../steps/func-deploy-steps.yml
        artifactsPath: ${{ env.artifactsPath }}
        archiveFile: ${{ env.archiveFileFunc }}
        funcName: ${{ env.funcName }}
        subscriptionId: ${{ env.subscriptionId }}
        subscriptionService: ${{ env. parameters.subscriptionService  }}
                    

  